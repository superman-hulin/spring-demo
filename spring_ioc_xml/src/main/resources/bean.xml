<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--spring对bean的管理细节
     1.创建bean的三种方式
     2.bean对象的作用范围
     3.bean对象的生命周期-->
    <!--创建bean的三种方式
    1)使用默认构造函数创建：bean标签只配id和class属性，采用的就是这种方式,如果类中没有默认构造函数，则对象无法创建
    2)使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
    <bean id="beanFactory" class="factory.BeanFactory"></bean>
    <bean id="accountService" factory-bean="beanFactory" factory-method="getAccountService"></bean>
    3)使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）
    <bean id="accountService" class="beanFactory" factory-method="getAccountService"></bean>-->
    <!--bean对象的作用范围
    bean标签的scope属性（用于指定bean的作用范围）取值：
        singleton：单例对象（也是该属性的默认值）
        prototype 多例对象
        request  作用于web应用的请求范围
        session  作用于web应用的会话范围
        global-session 作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session-->
    <!--bean对象的生命周期
     单例对象
        出生：当容器创建时，对象出生
        活着：只要容器还在，对象一直活着
        死亡：容器销毁，对象消亡
     多例对象
        出生：当我们使用对象时spring框架为我们创建
        活着：对象只要是在使用过程中就一直活着
        死亡：由jvm来垃圾回收
    -->
    <!--spring中的依赖注入
        ioc的作用是降低程序间的耦合（依赖关系），那么剩下的依赖关系的管理交给了spring来维护
        在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护就称之为依赖注入
            能注入的数据：
            1）基本类型和string
            2）其它bean类型（在配置文件中或者注解配置过的bean）
            3）复杂类型/集合类型
            注入的方式：
            1）使用构造函数提供
            2）使用set方法提供
            3）使用注解提供
        -->
    <!--构造函数注入： （不常用）
        使用标签：constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性：
            type 用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index 用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置从0开始
            name 用于指定给构造函数中指定名称的参数赋值  （常用）
            value 用于提供基本类型和string类型的数据
            ref 用于指定其他的bean类型-->
    <bean id="dependentTestCon" class="service.impl.DependentTestCon">
        <constructor-arg name="name" value="test"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>
    <bean id="now" class="java.util.Date"></bean>

    <!--set方法注入 （常用）
        使用标签：property
        标签出现的位置：bean标签的内部
        标签中的属性：
            name 用于指定给构造函数中指定名称的参数赋值
            value 用于提供基本类型和string类型的数据
            ref 用于指定其他的bean类型
    -->
    <bean id="dependentTestSet" class="service.impl.DependentTestSet">
        <property name="name" value="张三"></property>
        <property name="age" value="18"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <bean id="accountService" class="service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"></property>
    </bean>
    <bean id="accountDao" class="dao.impl.AccouuntDaoImpl"></bean>
</beans>